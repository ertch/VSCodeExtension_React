---
import CustomerCells from "@components/CustomerCells.astro";
import Bild from "@components/Bild.astro";
import FootButtons from "@components/FootButtons.astro";
import Popups from "@/components/Popups.astro";
import DebugLog from "@/components/DebugLog.astro";
import "../styles/main.scss";

interface Props {
	campaignTitle: string;
	campaignNr: string;
	jsFiles: Array<String>;
	header_imgs: Array<any>;
	header_name: string;
	cell_pattern: string;
	cell_query: string;
}

const { campaignTitle, campaignNr, jsFiles, header_imgs, header_name, cell_pattern,cell_query} = Astro.props;
---

<!doctype html>
<html lang="de">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{campaignTitle + campaignNr}</title>

		<!-- Campaign specific file loading -->
		{jsFiles.map((data) => (
		<>
			<script type="text/javascript" src={`${campaignNr}/js/${data}`}></script></>
		))}
		<script type="text/javascript" 	  src="include/js/element-logic.js"></script>
		<script type="text/javascript" 	  src="include/js/valididator.js"></script>
		<script type="text/javascript" 	  src="include/js/ttAPIandSQL.js"></script>
		<script type="text/javascript" 	  src="include/js/ttWebFunctions.js"></script>

		<!-- TODO: Herausfinden an welcher Stelle Prototype noch gebraucht wird -->
		<script type="text/javascript"    src="include/js/prototype/prototype.js"></script>

		<link rel="stylesheet" type="text/css" media="screen" href="include/css/general.css" />
		<link rel="stylesheet" type="text/css" media="screen" href="include/css/outbound.css" />	

	</head>

	<body>
		<!-- loading-symbol -->
		<svg id="loader" class="center" viewBox="0 0 43 65"style="fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1.5;">
			<style>
				path {fill: none; stroke: #21333a; stroke-width: 1px;}
				.umrisslinie {stroke-dasharray: 272; stroke-dashoffset: 272; animation: draw 3s linear infinite;}
				@keyframes draw {0% {stroke-dashoffset: 272;} 50% {stroke-dashoffset: 0;} 100% {stroke-dashoffset: -272;}}
			</style>
			<g id="umriss" transform="matrix(1,0,0,1,-84.8186,0)">
				<path class="umrisslinie" d="M85.478,52.668L85.478,44.837L92.569,40.718L106.07,48.616L113.074,44.626L85.449,28.637L85.449,12.495L106.326,0.444L127.188,12.661L127.188,20.323L120.261,24.324L106.393,16.509L99.435,20.407L127.052,36.567L127.052,52.526L106.421,64.532L85.478,52.668"/>
			</g>
		</svg>

		<header> <!-- Kopfleiste mit Titel und Logo -->
			{header_imgs.map((img) => (
					<Bild dateiname={img} />
				))}
			<h1>{header_name}</h1>
		</header>
	
		<main>   <!-- Kundeninformationen links -->	
			<CustomerCells
				pattern={cell_pattern}
				queryId={cell_query} 
			>
			</CustomerCells>

			<section class="middle_block"></div>

				<slot /> <!-- Hier HTML -->
			
				<FootButtons />    
			</section>
		</main>

		<Popups />
		<DebugLog />

		<script>
			document.querySelector("body").style.visibility = "hidden";
			document.querySelector("#loader").style.visibility = "visible";
			 window.onload = function() { 
    			document.querySelector("#loader").style.display = "none";
				document.querySelector("body").style.visibility = "visible";
			}
			
			// boot JS
			document.addEventListener('DOMContentLoaded', bootUpAPI());

			// HotKey event
			let timer = 0;
			document.onkeyup = function(event) {
				event = event || window.event;
				if (event.keyCode === 20) { 
					timer = 0;
				} else if (showDebug) {
					keyUp(event.keyCode);
				}
			};
			document.onkeydown = function(event) {
				event = event || window.event;
				if (event.keyCode === 20) { 
					timer++;
					timer===150? callFS() : undefined ;
				}else if (showDebug) {
					keyDown(event.keyCode);
				}
			};
			
			
			document.addEventListener("DOMContentLoaded", function() {

				const dialogList    = document.getElementsByTagName("dialog");
				const showButtonList = document.getElementsByClassName("calldialog");
				const closeButtonList = document.getElementsByClassName("closedialog");

				// "Show the dialog" button opens the dialog modal
				for(let x = 0; x < showButtonList.length; x++) {
					showButtonList[x].addEventListener("click", () => {
						console.log("click on " + showButtonList[x].id);
						dialogList[x].showModal();
					});
				}

				// "Close" button closes the dialog
				for(let x = 0; x < closeButtonList.length; x++) {
					closeButtonList[x].addEventListener("click", () => {
						dialogList[x].close();
					});
				}
			});
		</script>

	</body>
</html>
