---
import { callGetStaticPaths } from 'node_modules/astro/dist/core/render/route-cache';

interface Props {
  actions?: Array<Array<any>>;
  call?: String;
  disabled?: boolean;
  firstOption?: Array<any>;
  id: string;
  klasse?: string;
  label: string;
  options?: Array<Array<any>>;
  gate?: string;
  pageLock?: boolean;
  preset?: string;
  required?: boolean;
  submitTo?: string;
}

// Das Gatekeeper-Select fragt neben den Optionen-Array auch ein Aktionen-Array ab.
// Dort wird festgehalten, welche Elemente angezeigt werden oder verschwnden solen, sobald ein bestimmter Wert ausgewählt wurde.
// die Syntax für das Aktionen-Array ist [[Wert, Aktion, Ziel],...]. Das Ziel kann eine einzelne ID, ein Array aus IDs oder "all" sein.
// mit "all" werden alle Mitglieder der Gruppe (Elemente mit data-grp = "gruppenName") einbezogen.
// Die verfügbaren Aktionen sind: close, open & openOnly. "open" und "close" toggeln d-none in der Classlist des target.
// "openOnly" schließt erst alle Mitglieder der Gruppe und öffnet dann die angegebenen IDs.
// Werden bei call Funktionen übergeben, brauchen die Parameter dieser keine extra Anführungszeichen, aber können aussließlich nur Strings sein.
//
// actions:[
//        [value1, close, targetId1],                        
//        [value1, open, [targetId1, targetId2, targetId3]]
//        [value2, [setValue, disable], targetId3]
// ]; 



const { actions, call, disabled, firstOption, id, klasse, label, gate, pageLock, preset, required, submitTo } = Astro.props;
const { options } = Astro.props as Props;

let firstOpt = firstOption? firstOption : ["", "Bitte Auswählen"];
let lock = pageLock? "lock" : undefined;
let gateway = `callGatekeeper(${id})`
let errorname = `${id}_errorMsg`;
let gatewayArr = JSON.stringify(actions);
gatewayArr = gatewayArr
            .replace(/openOnly/g, 'oo')
            .replace(/setValue/g, 'sv')
            .replace(/open/g, 'o')
            .replace(/close/g, 'c')
            .replace(/disable/g, 'd')
            .replace(/all/g, 'a')
            .replace(/trigger/g, 't')
            .replace(/&quot;/g, '')
            .replace(/"/g, '')
            .replace(/,/g, '.');
---

<label for={id}>{label}</label>
<span class="errormessage" id={errorname}></span>
<select
  class=`dropdown h-drop ${klasse}`
  id          = {id}
  name        = {id}
  data-array  = {gatewayArr}
  data-cache  = {firstOpt[1]}
  data-gate   = {gate}
  data-call   = {call}
  data-lock   = {lock}
  data-submit = {submitTo}
  data-preset = {preset} 
  onchange    = {gateway}
  {required}
  {disabled}
>

  <option value={firstOpt[0]} selected>
    {firstOpt[1]}
  </option>

  {options.map((item) => <option value={item[0]}>{item[1]}</option>)}
</select>
